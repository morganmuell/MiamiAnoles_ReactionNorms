linewidth = 1.75, color = "grey10") +
geom_density_ridges2(rel_min_height = 5e-11, scale = 0.95,
stat = "density_ridges_HPDCrI",
quantile_lines = TRUE,
quantiles = c(0.95),
quantile_fun = HPD_fun,
fill = colsinter[4],
alpha = 0.8) +  #<-- transparency (0 more -- 1 less/solid)
theme_classic(base_size=15) +
ylab("") + xlab("Treatment Effect Size (95% Credible Interval)")
dev.off()
### Sprint Speed
X <- bssmodel1$X
Z <- bssmodel1$Z
unique(X[, "nTreatment"])  #<-- original levels
# Get NewCage names:
Zclnms <- strsplit(Z@Dimnames[[2L]], split = ".", fixed = TRUE)
nms <- unique(unlist(lapply(Zclnms, FUN = "[", i = 3)))
nNewCage <- length(nms)
Spp <- c("carolinensis", "chlorocyanus", "cristatellus", "cybotes", "distichus",
"equestris", "sagrei") #this has to be in alphabetical order for the apply line to work
nSpp <- length(Spp)
# Get Cage in order of data (i.e., order in X)
## first get subset of Z for just random intercepts (first half)
Zint <- Z[, 1:nNewCage]
# replace column names with simple cage name
Zint@Dimnames[[2L]] <- unlist(lapply(strsplit(Zint@Dimnames[[2L]],
split = ".", fixed = TRUE),
FUN = "[", i = 3))
# re-create data.frame from X design matrix (with only useful variables)
datf <- as.data.frame(as.matrix(X))[, c("SVL", "nTreatment", "Stops", "Fails", "SprintTemp", "AgeSprint")]
# use Z design matrix for cage intercepts to assign cages to each observation
datf$Cage <- as.character(Zint@Dimnames[[2L]][(Zint %*% matrix(seq(69), ncol = 1))@x]) #number in "seq" must equal number of cages
# Use X design matrix to assign populations to each observation
datf$Species <- Spp[1 + apply(as.matrix(X[, paste0("Species", Spp)[-1]]),
MARGIN = 1,
FUN = function(r){ ifelse(sum(r) > 0, which(r == 1), 0) })]
# use Z design matrix for cage intercepts to assign cages to each observation
datf$Cage <- as.character(Zint@Dimnames[[2L]][(Zint %*% matrix(seq(70), ncol = 1))@x]) #number in "seq" must equal number of cages
nrow(levels(ss$Cage))
levels(ss$Cage)
# use Z design matrix for cage intercepts to assign cages to each observation
datf$Cage <- as.character(Zint@Dimnames[[2L]][(Zint %*% matrix(seq(72), ncol = 1))@x]) #number in "seq" must equal number of cages
# use Z design matrix for cage intercepts to assign cages to each observation
datf$Cage <- as.character(Zint@Dimnames[[2L]][(Zint %*% matrix(seq(71), ncol = 1))@x]) #number in "seq" must equal number of cages
bssmodel1$VCV
bssmodel1$VCV[,2]
bssmodel1$VCV[,1]
head(bssmodel1$VCV)
nrow(bssmodel1$VCV[,1])
nrow(bssmodel1$VCV)
ncol(bssmodel1$VCV)
length(nms)
# use Z design matrix for cage intercepts to assign cages to each observation
datf$Cage <- as.character(Zint@Dimnames[[2L]][(Zint %*% matrix(seq(68), ncol = 1))@x]) #number in "seq" must equal number of cages
# Use X design matrix to assign populations to each observation
datf$Species <- Spp[1 + apply(as.matrix(X[, paste0("Species", Spp)[-1]]),
MARGIN = 1,
FUN = function(r){ ifelse(sum(r) > 0, which(r == 1), 0) })]
# Need placeholder response for MCMCglmm to find and be happy
## Also do predictions below marginal to other fixed effects
sppMeanCovs <- aggregate(cbind(SVL, Stops, Fails, SprintTemp, AgeSprint) ~ Species,
data = datf, FUN = mean)
### Map these back into datf
meanMap <- match(datf$Species, sppMeanCovs$Species)
datf <- within(datf, {
logSS <- 1  #<-- placeholder for predict.MCMCglmm
# within-population average values of covariates
## add tiny bit of random noise or else MCMCglmm complains about priors not
### strong enough to estimate fixed effects and drops these
SVL <- sppMeanCovs[meanMap, "SVL"] + rnorm(nrow(datf), 0, 0.005)
Stops <- sppMeanCovs[meanMap, "Stops"] + rnorm(nrow(datf), 0, 0.005)
Fails <- sppMeanCovs[meanMap, "Fails"] + rnorm(nrow(datf), 0, 0.005)
SprintTemp <- sppMeanCovs[meanMap, "SprintTemp"] + rnorm(nrow(datf), 0, 0.005)
AgeSprint <- sppMeanCovs[meanMap, "AgeSprint"] + rnorm(nrow(datf), 0, 0.005)
})
datf$predRfx <- predict(bssmodel1, newdata = datf,
marginal = NULL,    # so includes random effects in predictions
posterior = "all")
## Now get prediction for mean regression
### (make prediction marginal to all random effects = Default in predict.MCMCglmm)
datf$predMean <- predict(bssmodel1, newdata = datf,
posterior = "all")
ssdatf <- datf
for(p in 1:nSpp){
#png(filename=paste(popnames[p], "_max_intra_std.png", sep=""), width=5, height=4, res=300, units="in")
#svg(file = paste("R_exports/intraspecific_fig/log_scaled/ss/sslog_",sppnames[p],".svg", sep=""))
plot(predRfx ~ nTreatment, data = ssdatf,
type = "n", axes = FALSE,
xlim = c(-0.55, 0.55),
ylim = c(-1,1),
xlab = NA, ylab = NA)
axis(1, at = c(-0.55,0.55), lwd=10, labels=NA)
axis(2, at = c(-1,1), lwd=10, labels=NA)  #<-- so it ends up close to plotting area for "intecerpt line"
# Subset data for population
sub_datf <- subset(ssdatf, Species == sppnames[p])
#print(sub_datf)
#### Add Population mean regression line
# Need to create new data.frame that is ordered according to the covariate
## Do this to get a straight line, otherwise lines will just connect-the-dots
### in whatever order they appear and gives an awful line
# osub_datf <- sub_datf[order(sub_datf$nTreatment), ]
#  lines(x = osub_datf$nTreatment,   #<-- the entire range of x-axis
#        y = osub_datf$predEAHT, #<-- what does model predict for each x?
#        col = "black", lwd = 5)
# Add the points now
#points(TODO)
### Go through each Cage to plot cage reaction norms:
uCageID <- unique(as.character(sub_datf$Cage))
for(i in uCageID){
# First give an integer index value from `i` which is a character
i_int <- match(i, uCageID)  #<-- because group IDs are character/factors
### Subset data for i-th Cage
cagesub_datf <- subset(sub_datf, Cage == i)
#### Check/Order subsetted data by increasing nTreatment
##### Needed to plot straight lines
cagesub_datf <- cagesub_datf[order(cagesub_datf$nTreatment), ]
### Plot Cage model prediction
if(nrow(cagesub_datf)>1){
lines(cagesub_datf$predRfx ~ cagesub_datf$nTreatment,
col = cols[p], lwd = 6,
type="o") #<-- could make color ramp within each population
} else{
print(c(p,i,cagesub_datf$nTreatment))
}
}
osub_datf <- sub_datf[order(sub_datf$nTreatment), ]
lines(x = osub_datf$nTreatment,   #<-- the entire range of x-axis
y = osub_datf$predMean, #<-- what does model predict for each x?
col = "black", lwd = 10, lty=2)
#dev.off()
}
ssdatf
min(ssdatf$predMean)
max(ssdatf$predMean)
for(p in 1:nSpp){
#png(filename=paste(popnames[p], "_max_intra_std.png", sep=""), width=5, height=4, res=300, units="in")
#svg(file = paste("R_exports/intraspecific_fig/log_scaled/ss/sslog_",sppnames[p],".svg", sep=""))
plot(predRfx ~ nTreatment, data = ssdatf,
type = "n", axes = FALSE,
xlim = c(-0.55, 0.55),
ylim = c(-1,1),
xlab = NA, ylab = NA)
axis(1, at = c(-0.55,0.55), lwd=10, labels=NA)
axis(2, at = c(-4,0), lwd=10, labels=NA)  #<-- so it ends up close to plotting area for "intecerpt line"
# Subset data for population
sub_datf <- subset(ssdatf, Species == sppnames[p])
#print(sub_datf)
#### Add Population mean regression line
# Need to create new data.frame that is ordered according to the covariate
## Do this to get a straight line, otherwise lines will just connect-the-dots
### in whatever order they appear and gives an awful line
# osub_datf <- sub_datf[order(sub_datf$nTreatment), ]
#  lines(x = osub_datf$nTreatment,   #<-- the entire range of x-axis
#        y = osub_datf$predEAHT, #<-- what does model predict for each x?
#        col = "black", lwd = 5)
# Add the points now
#points(TODO)
### Go through each Cage to plot cage reaction norms:
uCageID <- unique(as.character(sub_datf$Cage))
for(i in uCageID){
# First give an integer index value from `i` which is a character
i_int <- match(i, uCageID)  #<-- because group IDs are character/factors
### Subset data for i-th Cage
cagesub_datf <- subset(sub_datf, Cage == i)
#### Check/Order subsetted data by increasing nTreatment
##### Needed to plot straight lines
cagesub_datf <- cagesub_datf[order(cagesub_datf$nTreatment), ]
### Plot Cage model prediction
if(nrow(cagesub_datf)>1){
lines(cagesub_datf$predRfx ~ cagesub_datf$nTreatment,
col = cols[p], lwd = 6,
type="o") #<-- could make color ramp within each population
} else{
print(c(p,i,cagesub_datf$nTreatment))
}
}
osub_datf <- sub_datf[order(sub_datf$nTreatment), ]
lines(x = osub_datf$nTreatment,   #<-- the entire range of x-axis
y = osub_datf$predMean, #<-- what does model predict for each x?
col = "black", lwd = 10, lty=2)
#dev.off()
}
for(p in 1:nSpp){
#png(filename=paste(popnames[p], "_max_intra_std.png", sep=""), width=5, height=4, res=300, units="in")
#svg(file = paste("R_exports/intraspecific_fig/log_scaled/ss/sslog_",sppnames[p],".svg", sep=""))
plot(predRfx ~ nTreatment, data = ssdatf,
type = "n", axes = FALSE,
xlim = c(-0.55, 0.55),
ylim = c(-5,0),
xlab = NA, ylab = NA)
axis(1, at = c(-0.55,0.55), lwd=10, labels=NA)
axis(2, at = c(-5,0), lwd=10, labels=NA)  #<-- so it ends up close to plotting area for "intecerpt line"
# Subset data for population
sub_datf <- subset(ssdatf, Species == sppnames[p])
#print(sub_datf)
#### Add Population mean regression line
# Need to create new data.frame that is ordered according to the covariate
## Do this to get a straight line, otherwise lines will just connect-the-dots
### in whatever order they appear and gives an awful line
# osub_datf <- sub_datf[order(sub_datf$nTreatment), ]
#  lines(x = osub_datf$nTreatment,   #<-- the entire range of x-axis
#        y = osub_datf$predEAHT, #<-- what does model predict for each x?
#        col = "black", lwd = 5)
# Add the points now
#points(TODO)
### Go through each Cage to plot cage reaction norms:
uCageID <- unique(as.character(sub_datf$Cage))
for(i in uCageID){
# First give an integer index value from `i` which is a character
i_int <- match(i, uCageID)  #<-- because group IDs are character/factors
### Subset data for i-th Cage
cagesub_datf <- subset(sub_datf, Cage == i)
#### Check/Order subsetted data by increasing nTreatment
##### Needed to plot straight lines
cagesub_datf <- cagesub_datf[order(cagesub_datf$nTreatment), ]
### Plot Cage model prediction
if(nrow(cagesub_datf)>1){
lines(cagesub_datf$predRfx ~ cagesub_datf$nTreatment,
col = cols[p], lwd = 6,
type="o") #<-- could make color ramp within each population
} else{
print(c(p,i,cagesub_datf$nTreatment))
}
}
osub_datf <- sub_datf[order(sub_datf$nTreatment), ]
lines(x = osub_datf$nTreatment,   #<-- the entire range of x-axis
y = osub_datf$predMean, #<-- what does model predict for each x?
col = "black", lwd = 10, lty=2)
#dev.off()
}
for(p in 1:nSpp){
#png(filename=paste(popnames[p], "_max_intra_std.png", sep=""), width=5, height=4, res=300, units="in")
#svg(file = paste("R_exports/intraspecific_fig/log_scaled/ss/sslog_",sppnames[p],".svg", sep=""))
plot(predRfx ~ nTreatment, data = ssdatf,
type = "n", axes = FALSE,
xlim = c(-0.55, 0.55),
ylim = c(-3,-2),
xlab = NA, ylab = NA)
axis(1, at = c(-0.55,0.55), lwd=10, labels=NA)
axis(2, at = c(-3,-2), lwd=10, labels=NA)  #<-- so it ends up close to plotting area for "intecerpt line"
# Subset data for population
sub_datf <- subset(ssdatf, Species == sppnames[p])
#print(sub_datf)
#### Add Population mean regression line
# Need to create new data.frame that is ordered according to the covariate
## Do this to get a straight line, otherwise lines will just connect-the-dots
### in whatever order they appear and gives an awful line
# osub_datf <- sub_datf[order(sub_datf$nTreatment), ]
#  lines(x = osub_datf$nTreatment,   #<-- the entire range of x-axis
#        y = osub_datf$predEAHT, #<-- what does model predict for each x?
#        col = "black", lwd = 5)
# Add the points now
#points(TODO)
### Go through each Cage to plot cage reaction norms:
uCageID <- unique(as.character(sub_datf$Cage))
for(i in uCageID){
# First give an integer index value from `i` which is a character
i_int <- match(i, uCageID)  #<-- because group IDs are character/factors
### Subset data for i-th Cage
cagesub_datf <- subset(sub_datf, Cage == i)
#### Check/Order subsetted data by increasing nTreatment
##### Needed to plot straight lines
cagesub_datf <- cagesub_datf[order(cagesub_datf$nTreatment), ]
### Plot Cage model prediction
if(nrow(cagesub_datf)>1){
lines(cagesub_datf$predRfx ~ cagesub_datf$nTreatment,
col = cols[p], lwd = 6,
type="o") #<-- could make color ramp within each population
} else{
print(c(p,i,cagesub_datf$nTreatment))
}
}
osub_datf <- sub_datf[order(sub_datf$nTreatment), ]
lines(x = osub_datf$nTreatment,   #<-- the entire range of x-axis
y = osub_datf$predMean, #<-- what does model predict for each x?
col = "black", lwd = 10, lty=2)
#dev.off()
}
for(p in 1:nSpp){
#png(filename=paste(popnames[p], "_max_intra_std.png", sep=""), width=5, height=4, res=300, units="in")
#svg(file = paste("R_exports/intraspecific_fig/log_scaled/ss/sslog_",sppnames[p],".svg", sep=""))
plot(predRfx ~ nTreatment, data = ssdatf,
type = "n", axes = FALSE,
xlim = c(-0.55, 0.55),
ylim = c(-2.8,-2),
xlab = NA, ylab = NA)
axis(1, at = c(-0.55,0.55), lwd=10, labels=NA)
axis(2, at = c(-2.8,-2), lwd=10, labels=NA)  #<-- so it ends up close to plotting area for "intecerpt line"
# Subset data for population
sub_datf <- subset(ssdatf, Species == sppnames[p])
#print(sub_datf)
#### Add Population mean regression line
# Need to create new data.frame that is ordered according to the covariate
## Do this to get a straight line, otherwise lines will just connect-the-dots
### in whatever order they appear and gives an awful line
# osub_datf <- sub_datf[order(sub_datf$nTreatment), ]
#  lines(x = osub_datf$nTreatment,   #<-- the entire range of x-axis
#        y = osub_datf$predEAHT, #<-- what does model predict for each x?
#        col = "black", lwd = 5)
# Add the points now
#points(TODO)
### Go through each Cage to plot cage reaction norms:
uCageID <- unique(as.character(sub_datf$Cage))
for(i in uCageID){
# First give an integer index value from `i` which is a character
i_int <- match(i, uCageID)  #<-- because group IDs are character/factors
### Subset data for i-th Cage
cagesub_datf <- subset(sub_datf, Cage == i)
#### Check/Order subsetted data by increasing nTreatment
##### Needed to plot straight lines
cagesub_datf <- cagesub_datf[order(cagesub_datf$nTreatment), ]
### Plot Cage model prediction
if(nrow(cagesub_datf)>1){
lines(cagesub_datf$predRfx ~ cagesub_datf$nTreatment,
col = cols[p], lwd = 6,
type="o") #<-- could make color ramp within each population
} else{
print(c(p,i,cagesub_datf$nTreatment))
}
}
osub_datf <- sub_datf[order(sub_datf$nTreatment), ]
lines(x = osub_datf$nTreatment,   #<-- the entire range of x-axis
y = osub_datf$predMean, #<-- what does model predict for each x?
col = "black", lwd = 10, lty=2)
#dev.off()
}
for(p in 1:nSpp){
#png(filename=paste(popnames[p], "_max_intra_std.png", sep=""), width=5, height=4, res=300, units="in")
svg(file = paste("R_exports/intraspecific_fig/log_scaled/ss/sslog_",sppnames[p],".svg", sep=""))
plot(predRfx ~ nTreatment, data = ssdatf,
type = "n", axes = FALSE,
xlim = c(-0.55, 0.55),
ylim = c(-2.8,-2),
xlab = NA, ylab = NA)
axis(1, at = c(-0.55,0.55), lwd=10, labels=NA)
axis(2, at = c(-2.8,-2), lwd=10, labels=NA)  #<-- so it ends up close to plotting area for "intecerpt line"
# Subset data for population
sub_datf <- subset(ssdatf, Species == sppnames[p])
#print(sub_datf)
#### Add Population mean regression line
# Need to create new data.frame that is ordered according to the covariate
## Do this to get a straight line, otherwise lines will just connect-the-dots
### in whatever order they appear and gives an awful line
# osub_datf <- sub_datf[order(sub_datf$nTreatment), ]
#  lines(x = osub_datf$nTreatment,   #<-- the entire range of x-axis
#        y = osub_datf$predEAHT, #<-- what does model predict for each x?
#        col = "black", lwd = 5)
# Add the points now
#points(TODO)
### Go through each Cage to plot cage reaction norms:
uCageID <- unique(as.character(sub_datf$Cage))
for(i in uCageID){
# First give an integer index value from `i` which is a character
i_int <- match(i, uCageID)  #<-- because group IDs are character/factors
### Subset data for i-th Cage
cagesub_datf <- subset(sub_datf, Cage == i)
#### Check/Order subsetted data by increasing nTreatment
##### Needed to plot straight lines
cagesub_datf <- cagesub_datf[order(cagesub_datf$nTreatment), ]
### Plot Cage model prediction
if(nrow(cagesub_datf)>1){
lines(cagesub_datf$predRfx ~ cagesub_datf$nTreatment,
col = cols[p], lwd = 6,
type="o") #<-- could make color ramp within each population
} else{
print(c(p,i,cagesub_datf$nTreatment))
}
}
osub_datf <- sub_datf[order(sub_datf$nTreatment), ]
lines(x = osub_datf$nTreatment,   #<-- the entire range of x-axis
y = osub_datf$predMean, #<-- what does model predict for each x?
col = "black", lwd = 10, lty=2)
dev.off()
}
setwd("~/Documents/PhD/Miami_Project/data-analysis/github/MiamiAnoles_ReactionNorms/results/endurance/Mar23_2024/")
### Import packages
library(emmeans)
library(ggplot2)
library(ggridges)
setwd("~/Documents/PhD/Miami_Project/data-analysis/github/MiamiAnoles_ReactionNorms/results/sprint-speed/Apr02_2024/")
### Calculate means
#long run full
lwuautofix <- read.csv(file="run1/ss_autocorr_fix_longrun.csv", header=TRUE)
lwuautorand <- read.csv(file="run1/ss_autocorr_fix_longrun.csv", header=TRUE)
lwuheidelf <- read.csv(file="run1/ss_heidelfout_longrun.csv", header=TRUE)
lwuheidelr <- read.csv(file="run1/ss_heidelrout_longrun.csv", header=TRUE)
lwuinteff <- read.csv(file="run1/ss_inteff_longrun.csv", header=TRUE)
lwuinvenv <- read.csv(file="run1/ss_invenveff_longrun.csv", header=TRUE)
lwupreenv <- read.csv(file="run1/ss_preenveff_longrun.csv", header=TRUE)
lwuinvtime <- read.csv(file="run1/ss_invtimeeff_longrun.csv", header=TRUE)
lwuunits <- read.csv(file="run1/ss_unitseff_longrun.csv", header=TRUE)
lwuphyl <- read.csv(file="run1/ss_phyleff_longrun.csv", header=TRUE)
lwuspp <- read.csv(file="run1/ss_sppeff_longrun.csv", header=TRUE)
lwupolyspp <- read.csv(file="run1/poly_ss_sppeff_longrun.csv", header=TRUE)
lwupolyunits <- read.csv(file="run1/poly_ss_unitseff_longrun.csv", header=TRUE)
lwudic <- read.csv(file="run1/wu_dics.csv", header=TRUE)
phyleff <- mean(lwuphyl$post.mean)
sppeff <- mean(lwuspp$post.mean)
resid <- mean(lwuunits$post.mean)
(phyleff + sppeff) / (phyleff + sppeff + resid)
phyleff / (phyleff + sppeff + resid)
polysppeff <- mean(lwupolyspp$post.mean)
polyresid <- mean(lwupolyunits$post.mean)
polysppeff / (polysppeff+polyresid)
summary(bssmodel1)
mean(lwuphyl$post.mean)
mean(lwuphyl$lower.95..CI)
mean(lwuphyl$upper.95..CI)
mean(lwuphyl$eff.samp)
mean(lwuspp$post.mean)
mean(lwuspp$lower.95..CI)
lwuspp
mean(lwuspp$upper.95..CI)
mean(lwuspp$eff.samp)
mean(lwuunits$post.mean)
mean(lwuunits$lower.95..CI)
mean(lwuunits$upper.95..CI)
mean(lwuunits$eff.samp)
mean(lwuinteff$post.mean)
mean(lwuinteff$lower.95..CI)
mean(lwuinteff$upper.95..CI)
mean(lwuinteff$eff.samp)
mean(lwuinteff$pMCMC)
mean(lwuinvenv$post.mean)
mean(lwuinvenv$lower.95..CI)
mean(lwuinvenv$upper.95..CI)
mean(lwuinvenv$eff.samp)
mean(lwuinvenv$pMCMC)
mean(lwupreenv$post.mean)
mean(lwupreenv$lower.95..CI)
$
mean(lwupreenv$upper.95..CI)
mean(lwupreenv$eff.samp)
mean(lwupreenv$pMCMC)
mean(lwuinvenv$post.mean)
mean(lwuinvenv$lower.95..CI)
mean(lwuinvenv$upper.95..CI)
mean(lwuinvenv$eff.samp)
mean(lwuinvenv$pMCMC)
mean(lwuheidelf$Pass.InvTime)
mean(lwuheidelf$Pass.Stat.Int)
mean(lwuheidelf$Pass.Preclim)
mean(lwuheidelf$Pass.InvTime)
mean(lwuheidelr$Pass.Stat.Resid)
mean(lwuheidelr$Pass.Stat.Spp)
mean(lwuheidelr$Pass.Stat.AbSpec)
ggplot(melt.ss.em, aes(x = value, y = variable)) +
coord_cartesian(ylim = c(1.4, 8.2)) +
xlim(-0.7, 0.7) +
scale_y_discrete(limits = unique(rev(melt.ss.em$variable))) +
geom_vline(xintercept = 0, linetype = "51", #<--lty is units on then units off
linewidth = 1.75, color = "grey10") +
geom_density_ridges2(rel_min_height = 5e-11, scale = 0.95,
stat = "density_ridges_HPDCrI",
quantile_lines = TRUE,
quantiles = c(0.95),
quantile_fun = HPD_fun,
fill = colsinter[4],
alpha = 0.8) +  #<-- transparency (0 more -- 1 less/solid)
theme_classic(base_size=15) +
ylab("") + xlab("Treatment Effect Size (95% Credible Interval)")
setwd("~/Documents/PhD/Miami_Project/data-analysis/github/MiamiAnoles_ReactionNorms/results/water-uptake/")
lwusampcor <- read.csv(file="rf_sampling_correlations_longrun.csv.csv", header=TRUE)
lwusampcor <- read.csv(file="rf_sampling_correlations_longrun.csv", header=TRUE)
mean(lwusampcor$V1)
setwd("~/Documents/PhD/Miami_Project/data-analysis/github/MiamiAnoles_ReactionNorms/results/endurance/")
lwusampcor <- read.csv(file="rf_sampling_correlations_longrun.csv", header=TRUE)
mean(lwusampcor$V1)
setwd("~/Documents/PhD/abronia/scripts")
library(adegenet)
#file "65filteredsinglepoly.fasta" is a fasta file containing SNPs after filtering
#corresponding structure file by the same name has same info - will use for analysis
#crud <- read.table("~/Documents/Classes/Scripting-Biologists/cristatellus_pop-gen/65filteredsinglepoly.str")
#Import SNP data, via structure file
zards <- read.table("../easley_outfiles/abronia-85-campbelli-only.snps", head=TRUE)
zards
row.names(zards) <- zards$V1
#olnames(zards)
#convert to haploid genind object
lizards <- df2genind(zards, ploidy=1) # conversion to genind
lizards
#find clusters/groups, k-means clustering algorithm will maximize variation among groups
# and minimize within-group variance
grp <- find.clusters(lizards, max.n.clust=10)
head(zards)
str(zards)
#find clusters/groups, k-means clustering algorithm will maximize variation among groups
# and minimize within-group variance
grp <- find.clusters(lizards, max.n.clust=10)
rownames(zards) <- zards$V1
colnames(zards) <- c("SampleID", "Sequence")
#convert to haploid genind object
lizards <- df2genind(zards, ploidy=1) # conversion to genind
#find clusters/groups, k-means clustering algorithm will maximize variation among groups
# and minimize within-group variance
grp <- find.clusters(lizards, max.n.clust=10)
zards[,1]
zards[1,1]
#convert to haploid genind object
lizards <- df2genind(zards[,2], ploidy=1) # conversion to genind
setwd("~/Documents/PhD/Miami_Project/data-analysis/github/MiamiAnoles_ReactionNorms/results/endurance/")
rm(list=ls()) #clear workspace
setwd("~/Documents/PhD/Miami_Project/data-analysis/github/MiamiAnoles_ReactionNorms/results/inc/")
lwusampcor <- read.csv(file="rf_sampling_correlations_longrun.csv", header=TRUE)
mean(lwusampcor$V1)
setwd("~/Documents/PhD/Miami_Project/data-analysis/github/MiamiAnoles_ReactionNorms/results/svl/")
lwusampcor <- read.csv(file="rf_sampling_correlations_longrun.csv", header=TRUE)
mean(lwusampcor$V1)
setwd("~/Documents/PhD/Miami_Project/data-analysis/github/MiamiAnoles_ReactionNorms/results/sprint-speed/")
lwusampcor <- read.csv(file="Apr02_2024/run1/rf_sampling_correlations_longrun.csv", header=TRUE)
mean(lwusampcor$V1)
