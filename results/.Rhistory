#track within-group variables
patch.N <- Seeder
patch.fA <- founders$local.fA[1]
pre.Ns[j] <- patch.N
pre.fAs[j] <- patch.fA
#patch.K <- Nm/(Nf+Nm)
#do selection within each path for G generations
for (x in 1:G){
states <- evolin(Nf=Nf,Nm=Nm,p1.hat=patch.fA)
N.prime <- states[1]
fA.prime <- states[4]
#K.prime <- states[2]
patch.N <- N.prime
patch.fA <- fA.prime
#patch.K <- K.prime
Nf <- states[2]
Nm <- states[3]
}
global.Ns[j] <- patch.N
global.fAs[j] <- patch.fA
#global.Ks[j] <- patch.K
}
N <- sum(global.Ns)
FA <- weighted.mean(global.fAs,w=global.Ns)
preFA <- weighted.mean(pre.fAs,w=pre.Ns)
#K <- weighted.mean(global.Ks,w=global.Ns)
freqs <- c(freqs,preFA,FA)
#freqs[i] <- FA
#cakes[i] <- K
snakes[i] <- N
}
#gen <- seq(1,Dispersals,1)
gen <- seq(0.5,Dispersals,0.5)
plot(gen, freqs, type='l', col='magenta', lwd=3, xlab='Dispersal Rounds', ylab='frequency of allele A', main='Evolution of Sex ratio')
evolve sex ratio in a structured metapopulation
#start by implementing the Wilson and Colwell model of sex ratio evolution
#Then we'll modify it to model the evolution of dispersiveness
##model parameters
Seeder <- 10 #size of founder group
Patches <- 150 #number of host individuals that need colonizing
E <- 7 #number of eggs laid by each female that survive to adulthood
k1 <- 0.33 #proportion of male progeny of fAA or fAa females (A is dominant)
k2 <- 0.5 #proportion of male progeny of faa females
G <- 1 #number of generations between dispersal
Dispersals <- 30 #number of rounds of dispersal
##Model variables
N <- 20 # global population size
K <- 0.5 # starting global proportion of males in global population
FA <- 0.1 # starting global frequency of allele A in the global population
#Function for within-group selection
evolin <- function(Nf,Nm,p1.hat){
N <- Nf + Nm
E <- 7
#k1 <- 0.33 #proportion of male progeny of fAA or fAa females (A is dominant)
#k2 <- 0.5 #proportion of male progeny of faa females
#get initial genotype frequencies
p1 <- p1.hat
p2 <- 1-p1.hat
p11 <- p1^2
p12 <- 2*p1*p2
p22 <- p2^2
P = p11 + p12 + p22
#get expected number of females
Nf.p11.b <- Nf*E*(1-k1) * p1 * (p11 + .5*p12)
Nf.p12.b <- Nf*E*((1-k1) * p11 * p2
+ (1-k1) * .5*p12
+ (1-k2) * p22 * p1)
Nf.p22.b <- Nf*E*((1-k2) * p2 * p22
+ (1-k1) * .5*p12)
Nf.b <- Nf.p11.b + Nf.p12.b + Nf.p22.b
#get expected numbr of males
Nm.p1.b <- Nf*E*k1*(p11 + .5*p12)
Nm.p2.b <- Nf*E*(.5*p12*k1 + p22*k2)
Nm.b <- Nm.p1.b + Nm.p2.b
N.b <- Nf.b + Nm.b
K.b <- Nm.b / N.b
#get expected genotype frequencies for each sex
p11.b <- Nf.p11.b / Nf.b
p12.b <- Nf.p12.b / Nf.b
p22.b <- Nf.p22.b / Nf.b
p1.b <- Nm.p1.b / Nm.b
p2.b <- Nm.p2.b / Nm.b
#get overall feq of allele A1
p.hat.prime <- (Nf.b*(2*p11.b + p12.b)
+ Nm.b*p1.b) / (2*Nf.b + Nm.b)
return(c(N.b,Nf.b,Nm.b,p.hat.prime))
}
#Function to initialze host group with dispersal from global pool
seed.group <- function(Seeder,K,FA){
Fa <- 1-FA
propFem <- 1-K
Nf <- ceiling(rbinom(1,Seeder,propFem))
if (Nf < 1){
Nf <- 1
}
Nm <- Seeder - Nf
if (Nm < 1){
Nm <- 1
Nf <- Nf - 1
}
alleles <- (2*Nf) + Nm
local.fA <- rbinom(1,alleles,FA) / alleles
local.fa <- 1-local.fA
return(data.frame(cbind(Nf,Nm,local.fA,local.fa)))
}
#track global fA, K, and N
freqs <- numeric()
cakes <- numeric(length=Dispersals)
snakes <- numeric(length=Dispersals)
for (i in 1:Dispersals){ #for each round of dispersal
global.Ns <- numeric(length=Patches)
pre.Ns <- numeric(length=Patches)
global.fAs <- numeric(length=Patches)
pre.fAs <- numeric(length=Patches)
global.Ks <- numeric(length=Patches)
print(FA)
for (j in 1:Patches){ #for each patch
##initialize each patch with a random sample from the global pool
founders <- seed.group(Seeder,K,FA)
Nf <- founders$Nf[1]
Nm <- founders$Nm[1]
#track within-group variables
patch.N <- Seeder
patch.fA <- founders$local.fA[1]
pre.Ns[j] <- patch.N
pre.fAs[j] <- patch.fA
#patch.K <- Nm/(Nf+Nm)
#do selection within each path for G generations
for (x in 1:G){
states <- evolin(Nf=Nf,Nm=Nm,p1.hat=patch.fA)
N.prime <- states[1]
fA.prime <- states[4]
#K.prime <- states[2]
patch.N <- N.prime
patch.fA <- fA.prime
#patch.K <- K.prime
Nf <- states[2]
Nm <- states[3]
}
global.Ns[j] <- patch.N
global.fAs[j] <- patch.fA
#global.Ks[j] <- patch.K
}
N <- sum(global.Ns)
FA <- weighted.mean(global.fAs,w=global.Ns)
preFA <- weighted.mean(pre.fAs,w=pre.Ns)
#K <- weighted.mean(global.Ks,w=global.Ns)
freqs <- c(freqs,preFA,FA)
#freqs[i] <- FA
#cakes[i] <- K
snakes[i] <- N
}
#gen <- seq(1,Dispersals,1)
gen <- seq(0.5,Dispersals,0.5)
plot(gen, freqs, type='l', col='magenta', lwd=3, xlab='Dispersal Rounds', ylab='frequency of allele A', main='Evolution of Sex ratio')
#evolve sex ratio in a structured metapopulation
#start by implementing the Wilson and Colwell model of sex ratio evolution
#Then we'll modify it to model the evolution of dispersiveness
##model parameters
Seeder <- 10 #size of founder group
Patches <- 150 #number of host individuals that need colonizing
E <- 7 #number of eggs laid by each female that survive to adulthood
k1 <- 0.33 #proportion of male progeny of fAA or fAa females (A is dominant)
k2 <- 0.5 #proportion of male progeny of faa females
G <- 1 #number of generations between dispersal
Dispersals <- 30 #number of rounds of dispersal
##Model variables
N <- 20 # global population size
K <- 0.5 # starting global proportion of males in global population
FA <- 0.1 # starting global frequency of allele A in the global population
#Function for within-group selection
evolin <- function(Nf,Nm,p1.hat){
N <- Nf + Nm
E <- 7
#k1 <- 0.33 #proportion of male progeny of fAA or fAa females (A is dominant)
#k2 <- 0.5 #proportion of male progeny of faa females
#get initial genotype frequencies
p1 <- p1.hat
p2 <- 1-p1.hat
p11 <- p1^2
p12 <- 2*p1*p2
p22 <- p2^2
P = p11 + p12 + p22
#get expected number of females
Nf.p11.b <- Nf*E*(1-k1) * p1 * (p11 + .5*p12)
Nf.p12.b <- Nf*E*((1-k1) * p11 * p2
+ (1-k1) * .5*p12
+ (1-k2) * p22 * p1)
Nf.p22.b <- Nf*E*((1-k2) * p2 * p22
+ (1-k1) * .5*p12)
Nf.b <- Nf.p11.b + Nf.p12.b + Nf.p22.b
#get expected numbr of males
Nm.p1.b <- Nf*E*k1*(p11 + .5*p12)
Nm.p2.b <- Nf*E*(.5*p12*k1 + p22*k2)
Nm.b <- Nm.p1.b + Nm.p2.b
N.b <- Nf.b + Nm.b
K.b <- Nm.b / N.b
#get expected genotype frequencies for each sex
p11.b <- Nf.p11.b / Nf.b
p12.b <- Nf.p12.b / Nf.b
p22.b <- Nf.p22.b / Nf.b
p1.b <- Nm.p1.b / Nm.b
p2.b <- Nm.p2.b / Nm.b
#get overall feq of allele A1
p.hat.prime <- (Nf.b*(2*p11.b + p12.b)
+ Nm.b*p1.b) / (2*Nf.b + Nm.b)
return(c(N.b,Nf.b,Nm.b,p.hat.prime))
}
#Function to initialze host group with dispersal from global pool
seed.group <- function(Seeder,K,FA){
Fa <- 1-FA
propFem <- 1-K
Nf <- ceiling(rbinom(1,Seeder,propFem))
if (Nf < 1){
Nf <- 1
}
Nm <- Seeder - Nf
if (Nm < 1){
Nm <- 1
Nf <- Nf - 1
}
alleles <- (2*Nf) + Nm
local.fA <- rbinom(1,alleles,FA) / alleles
local.fa <- 1-local.fA
return(data.frame(cbind(Nf,Nm,local.fA,local.fa)))
}
#track global fA, K, and N
freqs <- numeric()
cakes <- numeric(length=Dispersals)
snakes <- numeric(length=Dispersals)
for (i in 1:Dispersals){ #for each round of dispersal
global.Ns <- numeric(length=Patches)
pre.Ns <- numeric(length=Patches)
global.fAs <- numeric(length=Patches)
pre.fAs <- numeric(length=Patches)
global.Ks <- numeric(length=Patches)
print(FA)
for (j in 1:Patches){ #for each patch
##initialize each patch with a random sample from the global pool
founders <- seed.group(Seeder,K,FA)
Nf <- founders$Nf[1]
Nm <- founders$Nm[1]
#track within-group variables
patch.N <- Seeder
patch.fA <- founders$local.fA[1]
pre.Ns[j] <- patch.N
pre.fAs[j] <- patch.fA
#patch.K <- Nm/(Nf+Nm)
#do selection within each path for G generations
for (x in 1:G){
states <- evolin(Nf=Nf,Nm=Nm,p1.hat=patch.fA)
N.prime <- states[1]
fA.prime <- states[4]
#K.prime <- states[2]
patch.N <- N.prime
patch.fA <- fA.prime
#patch.K <- K.prime
Nf <- states[2]
Nm <- states[3]
}
global.Ns[j] <- patch.N
global.fAs[j] <- patch.fA
#global.Ks[j] <- patch.K
}
N <- sum(global.Ns)
FA <- weighted.mean(global.fAs,w=global.Ns)
preFA <- weighted.mean(pre.fAs,w=pre.Ns)
#K <- weighted.mean(global.Ks,w=global.Ns)
freqs <- c(freqs,preFA,FA)
#freqs[i] <- FA
#cakes[i] <- K
snakes[i] <- N
}
#gen <- seq(1,Dispersals,1)
gen <- seq(0.5,Dispersals,0.5)
plot(gen, freqs, type='l', col='magenta', lwd=3, xlab='Dispersal Rounds', ylab='frequency of allele A', main='Evolution of Sex ratio')
11+11+16
19*3
37+37+46
30+34+37
19+21+18
##--stacked barchart
#localities - low, mod, high
NCeggs <- c(11,16,11) #38
GVeggs <- c(19,19,19) #57
table(NCeggs,GVeggs)
cbind(NCeggs,GVeggs)
PCeggs <- c(37,37,46) #120
MIeggs <- c(30,34,37) #101
AUeggs <- c(19,21,18) #58
cbind(NCeggs, AUeggs, PCeggs, GVeggs, MIeggs)
rownames(stackeggs) <- c("Low", "Moderate", "High")
stackeggs <- cbind(NCeggs, AUeggs, PCeggs, GVeggs, MIeggs)
rownames(stackeggs) <- c("Low", "Moderate", "High")
stackeggs
colnames(stackeggs) <- c("North Carolina", "Auburn", "Palm Coast", "Gainesville",
"Miami")
stackeggs
barplot(stackeggs, main="Egg Output", ylab="Number of Eggs",
col=c("green", "yellow", "darkblue"), legend.text=rownames(stackeggs),
beside=FALSE)
42+29+29
31+31+38
30/101
30+34+37
##--stacked barchart
#localities - low, mod, high
NCeggs <- c(29,42,29) #38, 11,16,11, percentages are inputted
GVeggs <- c(33,34,33) #57, 19,19,19
PCeggs <- c(31,38,31) #120, 37,37,46
MIeggs <- c(30,34,36) #101, 30,34,37
AUeggs <- c(33,36,31) #58, 19,21,18
stackeggs <- cbind(NCeggs, AUeggs, PCeggs, GVeggs, MIeggs)
rownames(stackeggs) <- c("Low", "Moderate", "High")
colnames(stackeggs) <- c("North Carolina", "Auburn", "Palm Coast", "Gainesville",
"Miami")
barplot(stackeggs, main="Egg Output", ylab="Number of Eggs",
col=c("green", "yellow", "darkblue"), legend.text=rownames(stackeggs),
beside=FALSE)
barplot(stackeggs, main="Egg Output", ylab="Number of Eggs",
col=c("green", "yellow", "darkblue"),
#legend.text=rownames(stackeggs),
beside=FALSE)
barplot(stackeggs, main="Egg Output", ylab="% of Total Eggs",
col=c("green", "yellow", "darkblue"),
#legend.text=rownames(stackeggs),
beside=FALSE)
png(filename="R_exports/egg-output_stacked.png", width=6.94, height=5.24, units="in",
res=300)
barplot(stackeggs, main="Egg Output", ylab="% of Total Eggs",
col=c("green", "yellow", "darkblue"),
#legend.text=rownames(stackeggs),
beside=FALSE)
dev.off()
dev.off()
png(filename="R_exports/egg-output_stacked.png", width=6.94, height=5.24, units="in",
res=300)
barplot(stackeggs, main="Egg Output", ylab="% of Total Eggs",
col=c("green", "yellow", "darkblue"),
#legend.text=rownames(stackeggs),
beside=FALSE)
dev.off()
dev.off()
dev.off()
barplot(stackeggs, main="Egg Output", ylab="% of Total Eggs",
col=c("green", "yellow", "darkblue"),
#legend.text=rownames(stackeggs),
beside=FALSE)
barplot(stackeggs, main="Egg Output", ylab="% of Total Eggs",
col=c("green", "yellow", "darkblue"),
#legend.text=rownames(stackeggs),
beside=FALSE)
png(filename="R_exports/stacked-eggs.png", width=6.94, height=5.24, units="in",
res=300)
barplot(stackeggs, main="Egg Output", ylab="% of Total Eggs",
col=c("green", "yellow", "darkblue"),
#legend.text=rownames(stackeggs),
beside=FALSE)
dev.off()
dev.ff()
dev.off()
barplot(stackeggs, main="Egg Output", ylab="% of Total Eggs",
col=c("green", "yellow", "darkblue"),
#legend.text=rownames(stackeggs),
beside=FALSE)
library(pwr)
pwr.t.test(n=30, d=0.4, sig.level=0.5, type="paired")
pwr.t.test(n=25, d=0.4, sig.level=0.5, type="paired")
pwr.anova.test(k=4, n=25, f=0.4, sig.level=0.05)
install.packages("edgeR")
install.packages("DESeq2")
library(devtools)
install.packages("devtools")
library(devtools)
setwd("~/Documents/PhD/Miami_Project/data-analysis/github/MiamiAnoles_ReactionNorms/results/")
library(MCMCglmm)
library(psych)
wumcmc <- read.csv("water-uptake/fullpost_sums_May21_2024/run1/fullmod_mcmc_out.csv", header=TRUE)
incmcmc <- read.csv("inc/fullpost_sums_May21_2024/run1/inc_fullmod_mcmc_out.csv", header=TRUE)
svlmcmc <- read.csv("svl/fullpost_sums_May21_2024/run1/svl_fullmod_mcmc_out.csv", header=TRUE)
ssmcmc <- read.csv("sprint-speed/fullpost_sums_May21_2024/run1/ss_fullmod_mcmc_out.csv", header=TRUE)
endmcmc <- read.csv("endurance/fullpost_sums_May21_2024/run1/endur_fullmod_mcmc_out.csv", header=TRUE)
posterior.mode(wumcmc$Intercept, n=2^17)
posterior.mode(wumcmc$PreClim, n=2^17)
posterior.mode(wumcmc$InvClim, n=2^17)
posterior.mode(wumcmc$InvTime, n=2^17)
posterior.mode(incmcmc$Intercept, n=2^17)
posterior.mode(incmcmc$InvClim, n=2^17)
posterior.mode(incmcmc$PreClim, n=2^17)
posterior.mode(incmcmc$InvTime, n=2^17)
posterior.mode(svlmcmc$InvTime, n=2^17)
posterior.mode(svlmcmc$Intercept, n=2^17)
posterior.mode(svlmcmc$InvClim, n=2^17)
posterior.mode(svlmcmc$PreClim, n=2^17)
posterior.mode(ssmcmc$PreClim, n=2^17)
posterior.mode(ssmcmc$Intercept, n=2^17)
posterior.mode(ssmcmc$InvClim, n=2^17)
posterior.mode(ssmcmc$Invtime, n=2^17)
posterior.mode(ssmcmc$InvTime, n=2^17)
posterior.mode(endmcmc$InvTime, n=2^17)
posterior.mode(endmcmc$Intercept, n=2^17)
posterior.mode(endmcmc$InvClim, n=2^17)
posterior.mode(endmcmc$PreClim, n=2^17)
posterior.mode(wumcmc$Phylo, n=2^17)
posterior.mode(incmcmc$Phylo, n=2^17)
posterior.mode(svlmcmc$Phylo, n=2^17)
posterior.mode(ssmcmc$Phylo, n=2^17)
posterior.mode(endmcmc$Phylo, n=2^17)
posterior.mode(wumcmc$CVphylo, n=2^17)
posterior.mode(incmcmc$CVphylo, n=2^17)
posterior.mode(svlmcmc$CVphylo, n=2^17)
posterior.mode(ssmcmc$CVphylo, n=2^17)
posterior.mode(endmcmc$CVphylo, n=2^17)
posterior.mode(wumcmc$h2phylo, n=2^17)
posterior.mode(incmcmc$h2phylo, n=2^17)
posterior.mode(svlmcmc$h2phylo, n=2^17)
posterior.mode(ssmcmc$h2phylo, n=2^17)
posterior.mode(endmcmc$h2phylo, n=2^17)
posterior.mode(wumcmc$Spp, n=2^17)
posterior.mode(incmcmc$Spp, n=2^17)
posterior.mode(svlmcmc$Spp, n=2^17)
posterior.mode(ssmcmc$Spp, n=2^17)
posterior.mode(endmcmc$Spp, n=2^17)
posterior.mode(wumcmc$CVspp, n=2^17)
posterior.mode(incmcmc$CVspp, n=2^17)
posterior.mode(svlmcmc$CVspp, n=2^17)
posterior.mode(ssmcmc$CVspp, n=2^17)
posterior.mode(endmcmc$CVspp, n=2^17)
posterior.mode(wumcmc$s2, n=2^17)
posterior.mode(incmcmc$s2, n=2^17)
posterior.mode(svlmcmc$s2, n=2^17)
posterior.mode(ssmcmc$s2, n=2^17)
posterior.mode(endmcmc$s2, n=2^17)
posterior.mode(wumcmc$units, n=2^17)
posterior.mode(incmcmc$units, n=2^17)
posterior.mode(svlmcmc$units, n=2^17)
posterior.mode(ssmcmc$units, n=2^17)
posterior.mode(endmcmc$units, n=2^17)
posterior.mode(wumcmc$CVresid, n=2^17)
posterior.mode(incmcmc$CVresid, n=2^17)
posterior.mode(svlmcmc$CVresid, n=2^17)
posterior.mode(ssmcmc$CVresid, n=2^17)
posterior.mode(endmcmc$CVresid, n=2^17)
### one last heidelfout and heidelrout 7/2/24
wu_heidelfout <- read.csv("water-uptake/fullpost_sums_May21_2024/run1/wu_heidelfout_longrun.csv")
### one last heidelfout and heidelrout 7/2/24
wu_heidelfout <- read.csv("water-uptake/fullpost_sums_May21_2024/run1/wu_heidelfout_longrun.csv")
wu_heidelrout <- read.csv("water-uptake/fullpost_sums_May21_2024/run1/wu_heidelrout_longrun.csv")
inc_heidelfout <- read.csv("inc/fullpost_sums_May21_2024/run1/inc_heidelfout_longrun.csv")
inc_heidelrout <- read.csv("inc/fullpost_sums_May21_2024/run1/inc_heidelrout_longrun.csv")
svl_heidelfout <- read.csv("svl/fullpost_sums_May21_2024/run1/svl_heidelfout_longrun.csv")
svl_heidelrout <- read.csv("svl/fullpost_sums_May21_2024/run1/svl_heidelrout_longrun.csv")
ss_heidelfout <- read.csv("sprint-speed/fullpost_sums_May21_2024/run1/ss_heidelfout_longrun.csv")
ss_heidelrout <- read.csv("sprint-speed/fullpost_sums_May21_2024/run1/ss_heidelrout_longrun.csv")
endur_heidelfout <- read.csv("endurance/fullpost_sums_May21_2024/run1/endur_heidelfout_longrun.csv")
endur_heidelrout <- read.csv("water-uptake/fullpost_sums_May21_2024/run1/endur_heidelrout_longrun.csv")
endur_heidelrout <- read.csv("endurance/fullpost_sums_May21_2024/run1/endur_heidelrout_longrun.csv")
mean(wu_heidelfout$Pass.Stat.Int)
mean(wu_heidelfout$Pass.Preclim)
mean(wu_heidelfout$Pass.InvClim)
mean(wu_heidelfout$Pass.InvTime)
mean(wu_heidelrout$Pass.Stat.Spp)
mean(wu_heidelrout$Pass.Stat.AbSpec)
mean(wu_heidelrout$Pass.Stat.Resid)
mean(inc_heidelrout$Pass.Stat.Resid)
mean(inc_heidelrout$Pass.Stat.Spp)
mean(inc_heidelrout$Pass.Stat.AbSpec)
mean(inc_heidelfout$Pass.Stat.Int)
mean(inc_heidelfout$Pass.Preclim)
mean(inc_heidelfout$Pass.InvClim)
mean(inc_heidelfout$Pass.InvTime)
mean(svl_heidelfout$Pass.InvTime)
mean(svl_heidelfout$Pass.Stat.Int)
mean(svl_heidelfout$Pass.Preclim)
mean(svl_heidelfout$Pass.InvClim)
mean(svl_heidelrout$Pass.Stat.Spp)
mean(svl_heidelrout$Pass.Stat.AbSpec)
mean(svl_heidelrout$Pass.Stat.Resid)
mean(ss_heidelrout$Pass.Stat.Resid)
mean(ss_heidelrout$Pass.Stat.AbSpec)
mean(ss_heidelrout$Pass.Stat.Spp)
mean(ss_heidelfout$Pass.Stat.Int)
mean(ss_heidelfout$Pass.Preclim)
mean(ss_heidelfout$Pass.Invclim)
mean(ss_heidelfout$Pass.InvClim)
mean(ss_heidelfout$Pass.InvTime)
mean(endur_heidelfout$Pass.InvTime)
mean(endur_heidelfout$Pass.Stat.Int)
mean(endur_heidelfout$Pass.InvClim)
mean(endur_heidelfout$Pass.Preclim)
mean(endur_heidelfout$Pass.InvTime)
mean(endur_heidelrout$Pass.Stat.Spp)
mean(endur_heidelrout$Pass.Stat.AbSpec)
mean(endur_heidelrout$Pass.Stat.Resid)
endur_phyl <- read.csv("endurance/Mar23_2024/run1/endur_phyleff_longrun")
endur_phyl <- read.csv("endurance/Mar23_2024/run1/endur_phyleff_longrun.csv")
mean(endur_phyl$eff.samp)
redwumcmc <- read.csv("water-uptake/fullpost_sums_May21_2024/run1/reducemod_mcmc_out.csv", header=TRUE)
redincmcmc <- read.csv("inc/fullpost_sums_May21_2024/run1/inc_reducemod_mcmc_out.csv", header=TRUE)
redsvlmcmc <- read.csv("svl/fullpost_sums_May21_2024/run1/svl_reducemod_mcmc_out.csv", header=TRUE)
redssmcmc <- read.csv("sprint-speed/fullpost_sums_May21_2024/run1/ss_reducemod_mcmc_out.csv", header=TRUE)
redendmcmc <- read.csv("endurance/fullpost_sums_May21_2024/run1/endur_reducemod_mcmc_out.csv", header=TRUE)
posterior.mode(redwumcmc$Spp, n=2^17)
posterior.mode(redincmcmc$Spp, n=2^17)
posterior.mode(redsvlmcmc$Spp, n=2^17)
posterior.mode(redssmcmc$Spp, n=2^17)
posterior.mode(redendmcmc$Spp, n=2^17)
posterior.mode(redendmcmc$s2, n=2^17)
posterior.mode(redwumcmc$s2, n=2^17)
posterior.mode(redincmcmc$s2, n=2^17)
posterior.mode(redsvlmcmc$s2, n=2^17)
posterior.mode(redssmcmc$s2, n=2^17)
