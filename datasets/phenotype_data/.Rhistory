#-- Housekeeping
setwd("~/Documents/PhD/carolinensis-geovar/data-analysis/github/GreenAnole_RxnNorms")
library(ggplot2)
library(gridextra)
install.packages("gridextra")
install.packages("gridExtra")
library(ggplot2)
library(gridExtra)
library(tibble)
library(emmeans)
install.packages("emmeans")
library(emmeans)
load("data/covar_datfs.Rda")
#-- Needed inputs
load("data/greenies.Rda")
load("data/pruned_dfs.Rda")
str(gGrowth)
#prep datasets on model residuals for inc, svl, and growth
inctmp <- gInc[,c("Population","nTreatment","Inc","EggMass")]
svltmp <- gSVL[,c("Population","nTreatment","SVL","EggMass")]
grtmp <- gGrowth[,c("Population","nTreatment","Growth_mm.day","SVL")]
lm(Inc ~ EggMass, data=inctmp)$resid
inctmp$resid <- lm(Inc ~ EggMass, data=inctmp)$resid
svltmp$resid <= lm(SVL ~ EggMass, data=svltmp)$resid
grtmp$resid <- lm(Growth_mm.day ~ SVL, data=grtmp)$resid
popnames <- c("Tennessee", "NC","Auburn","Georgia","Gainesville","PalmCoast","Miami")
trt <- c("Low","Mod","High")
nrow(inctmp)
i <- 1
str(covEAHT)
#inctmp$exp_env_factor <- matrix(NA, nrow=nrow(inctmp), ncol=1)
inctmp$nat_env_factor <- matrix(NA, nrow=nrow(inctmp), ncol=1)
inctmp$data_type <- matrix("raw", nrow=nrow(inctmp), ncol=1)
i <- 1
while(i<272){
if(inctmp[i,"nTreatment"]=="1"){
inctmp[i, "nTreatment"] <- "High"
}
i <- i+1
}
i <- 1
while(i<272){
if(inctmp[i,"nTreatment"]=="0"){
inctmp[i, "nTreatment"] <- "Mod"
}
i <- i+1
}
i <- 1
while(i<272){
if(inctmp[i,"nTreatment"]=="-1"){
inctmp[i, "nTreatment"] <- "Low"
}
i <- i+1
}
str(covEAHT)
inctmp <- inctmp[,c("Population","nTreatment","resid","data_type","nat_env_factor")]
str(inctmp)
colnames(inctmp) <- c("gen_factor","exp_env_factor","phen_corrected","data_type","nat_env_factor")
inctmp$gen_factor <- as.factor(inctmp$gen_factor)
inctmp$exp_env_factor <- as.factor(inctmp$exp_env_factor)
inctmp$nat_env_factor <- as.factor(inctmp$nat_env_factor)
str(inctmp)
growdf <- data.frame()
inctmp$id <- c(1:nrow(inctmp))
for(i in popnames){
for(j in trt){
popdf <- subset(inctmp, gen_factor==i)
tmppopdf <- subset(popdf, exp_env_factor==j)
tmppopdf$phen_corrected <- scale(tmppopdf$phen_corrected)
growdf <- rbind(growdf,tmppopdf)
}
}
covIncResid <- growdf
str(covIncResid)
load("data/covar_datfs_corrected.Rda")
str(covInccor)
rm(inctmp)
nrow(svltmp)
#inctmp$exp_env_factor <- matrix(NA, nrow=nrow(inctmp), ncol=1)
svltmp$nat_env_factor <- matrix(NA, nrow=nrow(svltmp), ncol=1)
svltmp$data_type <- matrix("raw", nrow=nrow(svltmp), ncol=1)
i <- 1
while(i<272){
if(svltmp[i,"nTreatment"]=="-1"){
svltmp[i, "nTreatment"] <- "Low"
}
i <- i+1
}
svltmp <- svltmp[,c("Population","nTreatment","resid","data_type","nat_env_factor")]
colnames(svltmp) <- c("gen_factor","exp_env_factor","phen_corrected","data_type","nat_env_factor")
svltmp$gen_factor <- as.factor(svltmp$gen_factor)
svltmp$exp_env_factor <- as.factor(svltmp$exp_env_factor)
svltmp$nat_env_factor <- as.factor(svltmp$nat_env_factor)
str(svltmp)
svltmp$resid <= lm(SVL ~ EggMass, data=svltmp)$resid
svltmp <- gSVL[,c("Population","nTreatment","SVL","EggMass")]
svltmp$resid <= lm(SVL ~ EggMass, data=svltmp)$resid
#inctmp$exp_env_factor <- matrix(NA, nrow=nrow(inctmp), ncol=1)
svltmp$nat_env_factor <- matrix(NA, nrow=nrow(svltmp), ncol=1)
svltmp$data_type <- matrix("raw", nrow=nrow(svltmp), ncol=1)
i <- 1
while(i<272){
if(svltmp[i,"nTreatment"]=="-1"){
svltmp[i, "nTreatment"] <- "Low"
}
i <- i+1
}
i <- 1
while(i<272){
if(svltmp[i,"nTreatment"]=="0"){
svltmp[i, "nTreatment"] <- "Mod"
}
i <- i+1
}
i <- 1
while(i<272){
if(svltmp[i,"nTreatment"]=="1"){
svltmp[i, "nTreatment"] <- "High"
}
i <- i+1
}
str(svltmp)
svltmp$resid <= lm(SVL ~ EggMass, data=svltmp)$resid
svltmp$resid <- lm(SVL ~ EggMass, data=svltmp)$resid
svltmp <- gSVL[,c("Population","nTreatment","SVL","EggMass")]
svltmp$resid <- lm(SVL ~ EggMass, data=svltmp)$resid
#inctmp$exp_env_factor <- matrix(NA, nrow=nrow(inctmp), ncol=1)
svltmp$nat_env_factor <- matrix(NA, nrow=nrow(svltmp), ncol=1)
svltmp$data_type <- matrix("raw", nrow=nrow(svltmp), ncol=1)
i <- 1
while(i<272){
if(svltmp[i,"nTreatment"]=="1"){
svltmp[i, "nTreatment"] <- "High"
}
i <- i+1
}
i <- 1
while(i<272){
if(svltmp[i,"nTreatment"]=="0"){
svltmp[i, "nTreatment"] <- "Mod"
}
i <- i+1
}
i <- 1
while(i<272){
if(svltmp[i,"nTreatment"]=="-1"){
svltmp[i, "nTreatment"] <- "Low"
}
i <- i+1
}
str(svltmp)
svltmp <- svltmp[,c("Population","nTreatment","resid","data_type","nat_env_factor")]
str(svltmp)
colnames(svltmp) <- c("gen_factor","exp_env_factor","phen_corrected","data_type","nat_env_factor")
svltmp$gen_factor <- as.factor(svltmp$gen_factor)
svltmp$exp_env_factor <- as.factor(svltmp$exp_env_factor)
svltmp$nat_env_factor <- as.factor(svltmp$nat_env_factor)
growdf <- data.frame()
svltmp$id <- c(1:nrow(svltmp))
for(i in popnames){
for(j in trt){
popdf <- subset(svltmp, gen_factor==i)
tmppopdf <- subset(popdf, exp_env_factor==j)
tmppopdf$phen_corrected <- scale(tmppopdf$phen_corrected)
growdf <- rbind(growdf,tmppopdf)
}
}
covSVLResid <- growdf
#don't forget to assign nat env factor
i <- 1
while(i<272){
if(covIncResid[i,"gen_factor"]=="Tennessee"){
covIncResid[i, "nat_env_factor"] <- "Low"
}
i <- i+1
}
warnings()
str(covIncResid)
covIncResid$nat_env_factor <- as.character(covIncResid$nat_env_factor)
#don't forget to assign nat env factor
i <- 1
while(i<272){
if(covIncResid[i,"gen_factor"]=="Tennessee"){
covIncResid[i, "nat_env_factor"] <- "Low"
}
i <- i+1
}
#don't forget to assign nat env factor
i <- 1
while(i<272){
if(covIncResid[i,"gen_factor"]=="NC"){
covIncResid[i, "nat_env_factor"] <- "Mod"
}
i <- i+1
}
#don't forget to assign nat env factor
#had to switch nat env column to character to reassign then need to set it back
i <- 1
while(i<272){
if(covIncResid[i,"gen_factor"]=="Auburn"){
covIncResid[i, "nat_env_factor"] <- "Mod"
}
i <- i+1
}
#don't forget to assign nat env factor
#had to switch nat env column to character to reassign then need to set it back
i <- 1
while(i<272){
if(covIncResid[i,"gen_factor"]=="Georgia"){
covIncResid[i, "nat_env_factor"] <- "Mod"
}
i <- i+1
}
#don't forget to assign nat env factor
#had to switch nat env column to character to reassign then need to set it back
i <- 1
while(i<272){
if(covIncResid[i,"gen_factor"]=="Gainesville"){
covIncResid[i, "nat_env_factor"] <- "Mod"
}
i <- i+1
}
#don't forget to assign nat env factor
#had to switch nat env column to character to reassign then need to set it back
i <- 1
while(i<272){
if(covIncResid[i,"gen_factor"]=="PalmCoast"){
covIncResid[i, "nat_env_factor"] <- "Mod"
}
i <- i+1
}
#don't forget to assign nat env factor
#had to switch nat env column to character to reassign then need to set it back
i <- 1
while(i<272){
if(covIncResid[i,"gen_factor"]=="Miami"){
covIncResid[i, "nat_env_factor"] <- "High"
}
i <- i+1
}
covIncResid$nat_env_factor <- as.factor(covIncResid$nat_env_factor)
covIncResid
#don't forget to assign nat env factor
#had to switch nat env column to character to reassign then need to set it back
i <- 1
while(i<272){
if(covSVLResid[i,"gen_factor"]=="Miami"){
covSVLResid[i, "nat_env_factor"] <- "High"
}
i <- i+1
}
setwd("/Users/morganmuell/Documents/PhD/Miami_Project/data-analysis/github/MiamiAnoles_ReactionNorms/datasets/phenotype_data")
##--Load libraries
library(MCMCglmm)
library(nadiv)
library(phytools)
##--Prep Data and Priors
load("wutrim.Rdata")
load("model2df.rda")
tree <- read.tree(file="../../pruned_anole_tree.treefile")
Ainv <- inverseA(tree)$Ainv
prior1 <- list(R = list(V = 1e-12, nu = -2), #<-- Non-informative improper: *marginal* posterior equal to REML estimate
G = list(G1 = list(V = diag(2)*0.002, nu = 3,
alpha.mu = c(0,0), alpha.V = diag(2)*10000)))
pr2A <- list(R = list(V = 1, nu = 0.002),
G = list(G1 = list(V = diag(1), nu = 1, alpha.mu = 0, alpha.V = diag(1)*100),
G2 = list(V = diag(1), nu = 1, alpha.mu = 0, alpha.V = diag(1)*100)))
pr2B <- list(R = list(V = 1, nu = 0.002),
G = list(G1 = list(V = diag(1), nu = 1, alpha.mu = 0, alpha.V = diag(1)*10)))
##-- Run Model 1
set.seed(330)
bwumodel1 <- MCMCglmm(logWU ~ 1 + EggMass + nTreatment + PercDev + Species
+ Species*nTreatment,
random = ~us(1 + nTreatment):Cage, pr = TRUE,
data = wu, nitt = 275000, thin = 50, burnin = 25000,
verbose = FALSE, prior = prior1)
#loop management
i <- 1 #use i to index run in model 1
j <- 1 # use j to index output files
rlow <- 1 #use g to index net posterior positions
rhigh <- 2000
## Pull slopes from model iteration
tmpMod <- bwumodel1
SolColNms <- dimnames(tmpMod$Sol)[[2L]] #pulls random effects only
slpColInd <- which(startsWith(SolColNms, "nTreatment.Cage.")) #cuts off inconvenient names just to grab the column index number
devs <- tmpMod$Sol[i, slpColInd] #these are deviations of cage from species x treatment average
lstNmWrds <- strsplit(x = names(devs), split = ".", fixed = TRUE)
cageNumbs <- sapply(lstNmWrds, FUN = "[", i = 3) #this returns vector of only cage numbers, in order
islps <- matrix(NA, nrow=length(devs), ncol=1)
slopeframe <- data.frame(cageNumbs, devs, islps)
#convert cage deviations to deviations from model average -- CageDev + SpecAverage + RefSpp
cg <- 1 #index row number for loop
while(cg < length(devs)+1){
CID <- as.integer(slopeframe[cg,"cageNumbs"]) #make variable for cage ID
if(CID<11){ #cristatellus
slopeframe[cg,"islps"] <- slopeframe[cg,"devs"] + tmpMod$Sol[i,"nTreatment"] + tmpMod$Sol[i,"nTreatment:Speciescristatellus"]
#print(paste0(CID,": cristatellus picked"))
} else { #if the species is a green anole (range 11-20)
if(CID>10 & CID<21){ #sagrei
slopeframe[cg,"islps"] <- slopeframe[cg,"devs"] + tmpMod$Sol[i,"nTreatment"] + tmpMod$Sol[i,"nTreatment:Speciessagrei"]
#print(paste0(CID,": sagrei picked"))
} else {
if(CID>20 & CID<31){ #carolinensis
slopeframe[cg,"islps"] <- slopeframe[cg,"devs"] + tmpMod$Sol[i,"nTreatment"]
#print(paste0(CID,": carolinensis picked"))
} else {
if(CID>30 & CID<43){ #chlorocyanus
slopeframe[cg,"islps"] <- slopeframe[cg,"devs"] + tmpMod$Sol[i,"nTreatment"] + tmpMod$Sol[i,"nTreatment:Specieschlorocyanus"]
#print(paste0(CID,": chlorocyanus picked"))
} else {
if(CID>42 & CID<53){ #distichus
slopeframe[cg,"islps"] <- slopeframe[cg,"devs"] + tmpMod$Sol[i,"nTreatment"] + tmpMod$Sol[i,"nTreatment:Speciesdistichus"]
#  print(paste0(CID,": distichus picked"))
} else {
if(CID>56 & CID<68){ #cybotes
slopeframe[cg,"islps"] <- slopeframe[cg,"devs"] + tmpMod$Sol[i,"nTreatment"] + tmpMod$Sol[i,"nTreatment:Speciescybotes"]
# print(paste0(CID,": cybotes picked"))
} else {
if(CID>67 & CID<78){ #equestris
slopeframe[cg,"islps"] <- slopeframe[cg,"devs"] + tmpMod$Sol[i,"nTreatment"] + tmpMod$Sol[i,"nTreatment:Speciesequestris"]
# print(paste0(CID,": equestris picked"))
} else {slopeframe[cg,"islps"] <- "ERROR: CAGE NUMBER NOT FOUND IN DATASET"}
}
}
}
}
}
}
cg <- cg + 1
}
ordslp <- slopeframe[order(as.integer(slopeframe$cageNumbs)),]
iframe <- model2df[(model2df$Cage %in% cageNumbs),]
iframe$islps <- ordslp$islps[match(iframe$Cage, ordslp$cageNumbs)]
iframe$scInvTime[is.na(iframe$scInvTime)] <- 0 #<-- trick MCMCglmm that no missing values in InvTime
iframe$scislps <- scale(iframe$islps)
iframe$sislps <- scale(iframe$islps, center=FALSE)
set.seed(330)
bwumodel2 <- MCMCglmm(islps ~ scPreClim + scInvClim + at.level(dummyInv, "Invasive"):scInvTime,
random=~Species + AbSpec,
ginverse=list(Species=Ainv),
data=iframe,
prior=pr2A,
family = rep("gaussian", 1),
nitt=1500000, burnin=5000, thin=500, verbose=FALSE) #drop to 5000 burn-in
summary(bwumodel2)
autocorr.diag(bwumodel2$VCV)[2,]
plot(bwumodel2)
pr2A <- list(R = list(V = 1, nu = 0.002),
G = list(G1 = list(V = diag(1), nu = 1, alpha.mu = 0, alpha.V = diag(1)*10),
G2 = list(V = diag(1), nu = 1, alpha.mu = 0, alpha.V = diag(1)*10)))
set.seed(330)
bwumodel2 <- MCMCglmm(islps ~ scPreClim + scInvClim + at.level(dummyInv, "Invasive"):scInvTime,
random=~Species + AbSpec,
ginverse=list(Species=Ainv),
data=iframe,
prior=pr2A,
family = rep("gaussian", 1),
nitt=1500000, burnin=5000, thin=500, verbose=FALSE) #drop to 5000 burn-in
summary(bwumodel2)
autocorr.diag(bwumodel2$VCV)[2,]
cor(bwumodel2$VCV)
gremwu <- gremlin(islps ~ scPreClim + scInvClim + at.level(dummyInv, "Invasive"):scInvTime,
random=~Species + AbSpec,
ginverse=list(Species=Ainv),
data=iframe)
library(gremlin)
gremwu <- gremlin(islps ~ scPreClim + scInvClim + at.level(dummyInv, "Invasive"):scInvTime,
random=~Species + AbSpec,
ginverse=list(Species=Ainv),
data=iframe)
summary(gremwu)
gremwupoly <- gremlin(islps ~ scPreClim + scInvClim + at.level(dummyInv, "Invasive"):scInvTime,
random=~AbSpec,
#ginverse=list(Species=Ainv),
data=iframe)
summary(grempoly)
summary(gremwupoly)
gremwu$grMod$A
gremwu$grMod$AI
solve(gremu$grMod$AI)
solve(gremwu$grMod$AI)
cov2cor(solve(gremwu$grMod$AI))
